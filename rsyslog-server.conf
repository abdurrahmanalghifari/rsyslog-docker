# rsyslog configuration file

# For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html
# If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html

#### MODULES ####

# The imjournal module bellow is now used as a message source instead of imuxsock.
$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)
$ModLoad imjournal # provides access to the systemd journal
$ModLoad imklog # reads kernel messages (the same are read from journald)
$ModLoad immark  # provides --MARK-- message capability

# Provides UDP syslog reception
$ModLoad imudp
#$UDPServerRun 514

# Provides TCP syslog reception
#$ModLoad imtcp
#$InputTCPServerRun 514

# specify senders you permit to access
$AllowedSender TCP, 127.0.0.1, 10.10.100.0/28, *.log.central

#### GLOBAL DIRECTIVES ####

# Where to place auxiliary files
$WorkDirectory /var/lib/rsyslog

# Use default timestamp format
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

#### HOST RULES ####


# process host messages only server
#define rulesets first

$template Secure_log,"/data/auth/%HOSTNAME%-%fromhost%-%$year%%$month%%$day%.log"
auth.*;authpriv.*     ?Secure_log

$template System_log, "/data/system/%HOSTNAME%-%fromhost%-%$year%%$month%%$day%.log"
*.info;mail.*;cron.*;kern.*;authpriv.none;local0.none;local1.none,local2.none;local3.none;local4.none;local5.none;local6.none;local7.none ?System_log


# Log all kernel messages to the console.
# Logging much else clutters up the screen.
#kern.*                                                 /dev/console

# Log anything (except mail) of level info or higher.
# Don't log private authentication messages!
#*.info;mail.none;authpriv.none;cron.none                /var/log/messages

# The authpriv file has restricted access.
#authpriv.*                                              /var/log/secure

# Log all the mail messages in one place.
#mail.*                                                  -/var/log/maillog


# Log cron stuff
#cron.*                                                  /var/log/cron

# Everybody gets emergency messages
#*.emerg                                                 :omusrmsg:*

# Save news errors of level crit and higher in a special file.
#uucp,news.crit                                          /var/log/spooler

# Save boot messages also to boot.log
#local7.*                                                /var/log/boot.log


# ### begin forwarding rule ###
# The statement between the begin ... end define a SINGLE forwarding
# rule. They belong together, do NOT split them. If you create multiple
# forwarding rules, duplicate the whole block!
# Remote Logging (we use TCP for reliable delivery)
#
# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.
#$ActionQueueFileName fwdRule1 # unique name prefix for spool files
#$ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)
#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown
#$ActionQueueType LinkedList   # run asynchronously
#$ActionResumeRetryCount -1    # infinite retries if host is down
# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
#*.* @@remote-host:514
# ### end of the forwarding rule ###




############ AUTH

# process remote messages

#define rulesets first
$RuleSet auth
$template Secure_log,"/data/auth/%HOSTNAME%-%fromhost%-%$year%%$month%.log"
authpriv.*     ?Secure_log

$InputUDPServerBindRuleset auth
$UDPServerRun 10500

############ ALL SYSTEM

$RuleSet system
$template System_log, "/data/system/%HOSTNAME%-%fromhost%-%$year%%$month%.log"
mail.*;cron.*;kern.*;authpriv.none;local0.none;local1.none,local2.none;local3.none;local4.none;local5.none;local6.none;local7.none ?System_log

$InputUDPServerBindRuleset system
$UDPServerRun 10501

########### NGINX Access & Error Log

$Ruleset nginxLog
template (name="AccessLogNginx" type="string" string="/data/nginx/access-%hostname%-%fromhost-ip%-%$year%%$month%.log")
if $syslogfacility-text == 'local0' and $programname == 'nginx_access' then {
    action(type="omfile" dynaFile="AccessLogNginx")
    stop
}

template (name="ErrorLogNginx" type="string" string="/data/nginx/error-%hostname%-%fromhost-ip%-%$year%%$month%.log")
if $syslogfacility-text == 'local0' and $programname == 'nginx_error' then {
    action(type="omfile" dynaFile="ErrorLogNginx")
    stop
}

$InputUDPServerBindRuleset nginxLog
$UDPServerRun 10555


########### Project-log

$Ruleset projectLog
template (name="StdOutLog" type="string" string="/data/project-log/stdout-%hostname%-%fromhost-ip%-%$year%%$month%.log")
if $syslogfacility-text == 'local7' and $programname == 'stdout' then {
    action(type="omfile" dynaFile="StdOutLog")
    stop
}

template (name="StdErrLog" type="string" string="/data/project-log/stderr-%hostname%-%fromhost-ip%-%$year%%$month%%$day%.log")
if $syslogfacility-text == 'local7' and $programname == 'stderr' then {
    action(type="omfile" dynaFile="StdErrLog")
    stop
}

$InputUDPServerBindRuleset projectLog
$UDPServerRun 10512